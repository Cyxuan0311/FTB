#include "FTB/showing/MarioAnimation.hpp"
#include <ftxui/component/component.hpp>
#include <ftxui/dom/elements.hpp>
#include <ftxui/screen/color.hpp>
#include <cmath>

using namespace ftxui;

namespace FTB {

/**
 * @brief 构造函数，初始化动画数据
 */
MarioAnimation::MarioAnimation() : current_frame_(0), animation_speed_(0.04), high_frame_rate_mode_(false) {
    initializeFrames();
}

/**
 * @brief 获取当前动画帧的渲染元素
 * @param wave_progress 动画进度（0.0 - 2π）
 * @return 渲染元素
 */
Element MarioAnimation::render(double wave_progress) {
        // 优化帧计算：使用更平滑的插值算法，适合慢速播放
        double frame_progress = (wave_progress / (2 * M_PI)) * frames_.size();
        int frame_index = static_cast<int>(frame_progress) % frames_.size();
        
        // 添加帧间插值，使动画更平滑（保留用于未来优化）
        (void)(frame_progress - static_cast<int>(frame_progress));
        
        // 缓存当前帧，避免重复计算
        static int last_frame_index = -1;
        static Element cached_element;
        
        if (frame_index != last_frame_index) {
            const auto& current_frame = frames_[frame_index];
            
            Elements mario_elements;
            
            // 优化渲染：预分配空间，减少内存分配
            mario_elements.reserve(current_frame.size());
            
            // 渲染每一行，应用颜色主题
            for (const auto& line : current_frame) {
                Element line_element = applyColorTheme(line);
                mario_elements.push_back(std::move(line_element));
            }
            
            // 缓存渲染结果，添加优雅的边框效果
            cached_element = vbox(std::move(mario_elements)) |
                           borderDouble |
                           color(Color::RGB(33, 136, 143)) |
                           size(WIDTH, EQUAL, 40) |
                           size(HEIGHT, EQUAL, 15) |
                           center;
            
            last_frame_index = frame_index;
        }
        
        return cached_element;
    }

/**
 * @brief 获取动画帧数
 * @return 总帧数
 */
size_t MarioAnimation::getFrameCount() const {
    return frames_.size();
}

/**
 * @brief 设置动画速度
 * @param speed 动画速度（建议值：0.05-0.15）
 */
void MarioAnimation::setAnimationSpeed(double speed) {
    animation_speed_ = speed;
}

/**
 * @brief 获取动画速度
 * @return 当前动画速度
 */
double MarioAnimation::getAnimationSpeed() const {
    return animation_speed_;
}

/**
 * @brief 启用高帧率模式
 * @param enable 是否启用高帧率模式
 */
void MarioAnimation::setHighFrameRateMode(bool enable) {
    high_frame_rate_mode_ = enable;
    if (enable) {
        // 高帧率模式：优雅的动画速度，适合慢速欣赏
        animation_speed_ = 0.20;
    } else {
        // 标准模式：更慢的动画速度
        animation_speed_ = 0.16;
    }
}

/**
 * @brief 检查是否启用高帧率模式
 * @return 是否启用高帧率模式
 */
bool MarioAnimation::isHighFrameRateMode() const {
    return high_frame_rate_mode_;
}

/**
 * @brief 初始化12帧完整跳跃动画数据
 */
void MarioAnimation::initializeFrames() {
        frames_ = {
            // 第1帧：左缩进8，顶部空行2
            {
                "",
                "",
                "        ───▐▀▄──────▄▀▌───▄▄▄▄▄▄▄",
                "        ───▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄",
                "        ──▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "        ──▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "       ▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌",
                "       ▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄",
                "       ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄█▒█",
                "       ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▀",
                "        ──▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌",
                "        ────▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀"
            },
            // 第2帧：左缩进7，顶部空行1
            {
                "",
                "       ───▐▀▄──────▄▀▌───▄▄▄▄▄▄▄",
                "       ───▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄",
                "       ──▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "       ──▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "      ▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌",
                "      ▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄",
                "      ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄█▒█",
                "      ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▀",
                "       ──▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌",
                "       ────▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀"
            },
            // 第3帧：左缩进6，顶部空行0
            {
                "      ───▐▀▄──────▄▀▌───▄▄▄▄▄▄▄",
                "      ───▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄",
                "      ──▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "      ──▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "     ▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌",
                "     ▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄",
                "     ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄█▒█",
                "     ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▀",
                "      ──▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌",
                "      ────▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀"
            },
            // 第4帧：左缩进5，顶部空行1
            {
                "",
                "     ───▐▀▄──────▄▀▌───▄▄▄▄▄▄▄",
                "     ───▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄",
                "     ──▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "     ──▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "    ▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌",
                "    ▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄",
                "    ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄█▒█",
                "    ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▀",
                "     ──▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌",
                "     ────▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀"
            },
            // 第5帧：左缩进4，顶部空行2
            {
                "",
                "",
                "    ───▐▀▄──────▄▀▌───▄▄▄▄▄▄▄",
                "    ───▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄",
                "    ──▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "    ──▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "   ▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌",
                "   ▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄",
                "   ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄█▒█",
                "   ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▀",
                "    ──▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌",
                "    ────▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀"
            },
            // 第6帧：左缩进3，顶部空行1
            {
                "",
                "   ───▐▀▄──────▄▀▌───▄▄▄▄▄▄▄",
                "   ───▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄",
                "   ──▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "   ──▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "  ▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌",
                "  ▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄",
                "  ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄█▒█",
                "  ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▀",
                "   ──▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌",
                "   ────▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀"
            },
            // 第7帧：左缩进2，顶部空行0
            {
                "  ───▐▀▄──────▄▀▌───▄▄▄▄▄▄▄",
                "  ───▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄",
                "  ──▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "  ──▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                " ▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌",
                " ▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄",
                " ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄█▒█",
                " ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▀",
                "  ──▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌",
                "  ────▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀"
            },
            // 第8帧：左缩进1，顶部空行1
            {
                "",
                " ───▐▀▄──────▄▀▌───▄▄▄▄▄▄▄",
                " ───▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄",
                " ──▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                " ──▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌",
                "▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄",
                "▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄█▒█",
                "▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▀",
                " ──▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌",
                " ────▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀"
            },
            // 第9帧：左缩进0，顶部空行2
            {
                "",
                "",
                "───▐▀▄──────▄▀▌───▄▄▄▄▄▄▄",
                "───▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄",
                "──▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "──▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌",
                "▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄",
                "▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄█▒█",
                "▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▀",
                "──▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌",
                "────▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀"
            },
            // 第10帧：左缩进0，顶部空行1
            {
                "",
                "───▐▀▄──────▄▀▌───▄▄▄▄▄▄▄",
                "───▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄",
                "──▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "──▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌",
                "▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄",
                "▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄█▒█",
                "▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▀",
                "──▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌",
                "────▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀"
            },
            // 第11帧：左缩进0，顶部空行0
            {
                "───▐▀▄──────▄▀▌───▄▄▄▄▄▄▄",
                "───▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄",
                "──▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "──▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌",
                "▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄",
                "▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄█▒█",
                "▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▀",
                "──▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌",
                "────▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀"
            },
            // 第12帧：左缩进0，顶部空行1（收束帧）
            {
                "",
                "───▐▀▄──────▄▀▌───▄▄▄▄▄▄▄",
                "───▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄",
                "──▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "──▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄",
                "▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌",
                "▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄",
                "▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄█▒█",
                "▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▀",
                "──▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌",
                "────▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀"
            }
        };
    }

/**
 * @brief 应用颜色主题到文本行
 * @param line 文本行
 * @return 带颜色的元素
 */
Element MarioAnimation::applyColorTheme(const std::string& line) {
        // 优化的颜色系统 - 基于字符类型的高效着色
        Element line_element = text(line);
        
        // 使用字符串查找避免Unicode字符比较警告
        if (line.find("─") != std::string::npos) {
            // 水平线条 - 温暖橙色
            line_element = text(line) | color(Color::RGB(255, 165, 0));
        } else if (line.find("▐") != std::string::npos || line.find("▌") != std::string::npos) {
            // 垂直边框 - 深橙色
            line_element = text(line) | color(Color::RGB(255, 140, 0));
        } else if (line.find("▀") != std::string::npos || line.find("▄") != std::string::npos) {
            // 上下边框 - 亮橙色
            line_element = text(line) | color(Color::RGB(255, 180, 0));
        } else if (line.find("▒") != std::string::npos) {
            // 填充字符 - 温暖米色
            line_element = text(line) | color(Color::RGB(255, 228, 196));
        } else if (line.find("█") != std::string::npos) {
            // 实心字符 - 深棕色
            line_element = text(line) | color(Color::RGB(139, 69, 19));
        } else if (line.length() > 5) {
            // 长线条 - 浅米色
            line_element = text(line) | color(Color::RGB(245, 222, 179));
        } else {
            // 默认颜色 - 保持原色
            line_element = text(line);
        }
        
        return line_element;
    }
} // namespace FTB
 